// Code generated by protoc-gen-go. DO NOT EDIT.
// source: storage.proto

package storage_v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	model "github.com/jaegertracing/jaeger/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetDependenciesRequest struct {
	StartTime            *types.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              *types.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetDependenciesRequest) Reset()         { *m = GetDependenciesRequest{} }
func (m *GetDependenciesRequest) String() string { return proto.CompactTextString(m) }
func (*GetDependenciesRequest) ProtoMessage()    {}
func (*GetDependenciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{0}
}

func (m *GetDependenciesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDependenciesRequest.Unmarshal(m, b)
}
func (m *GetDependenciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDependenciesRequest.Marshal(b, m, deterministic)
}
func (m *GetDependenciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDependenciesRequest.Merge(m, src)
}
func (m *GetDependenciesRequest) XXX_Size() int {
	return xxx_messageInfo_GetDependenciesRequest.Size(m)
}
func (m *GetDependenciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDependenciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDependenciesRequest proto.InternalMessageInfo

func (m *GetDependenciesRequest) GetStartTime() *types.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *GetDependenciesRequest) GetEndTime() *types.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

type GetDependenciesResponse struct {
	Dependencies         []*model.DependencyLink `protobuf:"bytes,1,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetDependenciesResponse) Reset()         { *m = GetDependenciesResponse{} }
func (m *GetDependenciesResponse) String() string { return proto.CompactTextString(m) }
func (*GetDependenciesResponse) ProtoMessage()    {}
func (*GetDependenciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{1}
}

func (m *GetDependenciesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDependenciesResponse.Unmarshal(m, b)
}
func (m *GetDependenciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDependenciesResponse.Marshal(b, m, deterministic)
}
func (m *GetDependenciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDependenciesResponse.Merge(m, src)
}
func (m *GetDependenciesResponse) XXX_Size() int {
	return xxx_messageInfo_GetDependenciesResponse.Size(m)
}
func (m *GetDependenciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDependenciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDependenciesResponse proto.InternalMessageInfo

func (m *GetDependenciesResponse) GetDependencies() []*model.DependencyLink {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

type WriteSpanRequest struct {
	Span                 *model.Span `protobuf:"bytes,1,opt,name=span,proto3" json:"span,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *WriteSpanRequest) Reset()         { *m = WriteSpanRequest{} }
func (m *WriteSpanRequest) String() string { return proto.CompactTextString(m) }
func (*WriteSpanRequest) ProtoMessage()    {}
func (*WriteSpanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{2}
}

func (m *WriteSpanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteSpanRequest.Unmarshal(m, b)
}
func (m *WriteSpanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteSpanRequest.Marshal(b, m, deterministic)
}
func (m *WriteSpanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteSpanRequest.Merge(m, src)
}
func (m *WriteSpanRequest) XXX_Size() int {
	return xxx_messageInfo_WriteSpanRequest.Size(m)
}
func (m *WriteSpanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteSpanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriteSpanRequest proto.InternalMessageInfo

func (m *WriteSpanRequest) GetSpan() *model.Span {
	if m != nil {
		return m.Span
	}
	return nil
}

// empty; extensible in the future
type WriteSpanResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteSpanResponse) Reset()         { *m = WriteSpanResponse{} }
func (m *WriteSpanResponse) String() string { return proto.CompactTextString(m) }
func (*WriteSpanResponse) ProtoMessage()    {}
func (*WriteSpanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{3}
}

func (m *WriteSpanResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteSpanResponse.Unmarshal(m, b)
}
func (m *WriteSpanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteSpanResponse.Marshal(b, m, deterministic)
}
func (m *WriteSpanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteSpanResponse.Merge(m, src)
}
func (m *WriteSpanResponse) XXX_Size() int {
	return xxx_messageInfo_WriteSpanResponse.Size(m)
}
func (m *WriteSpanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteSpanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WriteSpanResponse proto.InternalMessageInfo

type GetTraceRequest struct {
	TraceId              []byte   `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTraceRequest) Reset()         { *m = GetTraceRequest{} }
func (m *GetTraceRequest) String() string { return proto.CompactTextString(m) }
func (*GetTraceRequest) ProtoMessage()    {}
func (*GetTraceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{4}
}

func (m *GetTraceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTraceRequest.Unmarshal(m, b)
}
func (m *GetTraceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTraceRequest.Marshal(b, m, deterministic)
}
func (m *GetTraceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTraceRequest.Merge(m, src)
}
func (m *GetTraceRequest) XXX_Size() int {
	return xxx_messageInfo_GetTraceRequest.Size(m)
}
func (m *GetTraceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTraceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTraceRequest proto.InternalMessageInfo

func (m *GetTraceRequest) GetTraceId() []byte {
	if m != nil {
		return m.TraceId
	}
	return nil
}

type GetServicesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetServicesRequest) Reset()         { *m = GetServicesRequest{} }
func (m *GetServicesRequest) String() string { return proto.CompactTextString(m) }
func (*GetServicesRequest) ProtoMessage()    {}
func (*GetServicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{5}
}

func (m *GetServicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetServicesRequest.Unmarshal(m, b)
}
func (m *GetServicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetServicesRequest.Marshal(b, m, deterministic)
}
func (m *GetServicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServicesRequest.Merge(m, src)
}
func (m *GetServicesRequest) XXX_Size() int {
	return xxx_messageInfo_GetServicesRequest.Size(m)
}
func (m *GetServicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetServicesRequest proto.InternalMessageInfo

type GetServicesResponse struct {
	Services             []string `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetServicesResponse) Reset()         { *m = GetServicesResponse{} }
func (m *GetServicesResponse) String() string { return proto.CompactTextString(m) }
func (*GetServicesResponse) ProtoMessage()    {}
func (*GetServicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{6}
}

func (m *GetServicesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetServicesResponse.Unmarshal(m, b)
}
func (m *GetServicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetServicesResponse.Marshal(b, m, deterministic)
}
func (m *GetServicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServicesResponse.Merge(m, src)
}
func (m *GetServicesResponse) XXX_Size() int {
	return xxx_messageInfo_GetServicesResponse.Size(m)
}
func (m *GetServicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetServicesResponse proto.InternalMessageInfo

func (m *GetServicesResponse) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

type GetOperationsRequest struct {
	Service              string   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	SpanKind             string   `protobuf:"bytes,2,opt,name=span_kind,json=spanKind,proto3" json:"span_kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOperationsRequest) Reset()         { *m = GetOperationsRequest{} }
func (m *GetOperationsRequest) String() string { return proto.CompactTextString(m) }
func (*GetOperationsRequest) ProtoMessage()    {}
func (*GetOperationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{7}
}

func (m *GetOperationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOperationsRequest.Unmarshal(m, b)
}
func (m *GetOperationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOperationsRequest.Marshal(b, m, deterministic)
}
func (m *GetOperationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOperationsRequest.Merge(m, src)
}
func (m *GetOperationsRequest) XXX_Size() int {
	return xxx_messageInfo_GetOperationsRequest.Size(m)
}
func (m *GetOperationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOperationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOperationsRequest proto.InternalMessageInfo

func (m *GetOperationsRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *GetOperationsRequest) GetSpanKind() string {
	if m != nil {
		return m.SpanKind
	}
	return ""
}

type Operation struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SpanKind             string   `protobuf:"bytes,2,opt,name=span_kind,json=spanKind,proto3" json:"span_kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{8}
}

func (m *Operation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Operation.Unmarshal(m, b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
}
func (m *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(m, src)
}
func (m *Operation) XXX_Size() int {
	return xxx_messageInfo_Operation.Size(m)
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

func (m *Operation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Operation) GetSpanKind() string {
	if m != nil {
		return m.SpanKind
	}
	return ""
}

type GetOperationsResponse struct {
	OperationNames       []string     `protobuf:"bytes,1,rep,name=operationNames,proto3" json:"operationNames,omitempty"`
	Operations           []*Operation `protobuf:"bytes,2,rep,name=operations,proto3" json:"operations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetOperationsResponse) Reset()         { *m = GetOperationsResponse{} }
func (m *GetOperationsResponse) String() string { return proto.CompactTextString(m) }
func (*GetOperationsResponse) ProtoMessage()    {}
func (*GetOperationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{9}
}

func (m *GetOperationsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOperationsResponse.Unmarshal(m, b)
}
func (m *GetOperationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOperationsResponse.Marshal(b, m, deterministic)
}
func (m *GetOperationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOperationsResponse.Merge(m, src)
}
func (m *GetOperationsResponse) XXX_Size() int {
	return xxx_messageInfo_GetOperationsResponse.Size(m)
}
func (m *GetOperationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOperationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOperationsResponse proto.InternalMessageInfo

func (m *GetOperationsResponse) GetOperationNames() []string {
	if m != nil {
		return m.OperationNames
	}
	return nil
}

func (m *GetOperationsResponse) GetOperations() []*Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

type TraceQueryParameters struct {
	ServiceName          string            `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	OperationName        string            `protobuf:"bytes,2,opt,name=operation_name,json=operationName,proto3" json:"operation_name,omitempty"`
	Tags                 map[string]string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StartTimeMin         *types.Timestamp  `protobuf:"bytes,4,opt,name=start_time_min,json=startTimeMin,proto3" json:"start_time_min,omitempty"`
	StartTimeMax         *types.Timestamp  `protobuf:"bytes,5,opt,name=start_time_max,json=startTimeMax,proto3" json:"start_time_max,omitempty"`
	DurationMin          *types.Duration   `protobuf:"bytes,6,opt,name=duration_min,json=durationMin,proto3" json:"duration_min,omitempty"`
	DurationMax          *types.Duration   `protobuf:"bytes,7,opt,name=duration_max,json=durationMax,proto3" json:"duration_max,omitempty"`
	NumTraces            int32             `protobuf:"varint,8,opt,name=num_traces,json=numTraces,proto3" json:"num_traces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TraceQueryParameters) Reset()         { *m = TraceQueryParameters{} }
func (m *TraceQueryParameters) String() string { return proto.CompactTextString(m) }
func (*TraceQueryParameters) ProtoMessage()    {}
func (*TraceQueryParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{10}
}

func (m *TraceQueryParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TraceQueryParameters.Unmarshal(m, b)
}
func (m *TraceQueryParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TraceQueryParameters.Marshal(b, m, deterministic)
}
func (m *TraceQueryParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceQueryParameters.Merge(m, src)
}
func (m *TraceQueryParameters) XXX_Size() int {
	return xxx_messageInfo_TraceQueryParameters.Size(m)
}
func (m *TraceQueryParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceQueryParameters.DiscardUnknown(m)
}

var xxx_messageInfo_TraceQueryParameters proto.InternalMessageInfo

func (m *TraceQueryParameters) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *TraceQueryParameters) GetOperationName() string {
	if m != nil {
		return m.OperationName
	}
	return ""
}

func (m *TraceQueryParameters) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *TraceQueryParameters) GetStartTimeMin() *types.Timestamp {
	if m != nil {
		return m.StartTimeMin
	}
	return nil
}

func (m *TraceQueryParameters) GetStartTimeMax() *types.Timestamp {
	if m != nil {
		return m.StartTimeMax
	}
	return nil
}

func (m *TraceQueryParameters) GetDurationMin() *types.Duration {
	if m != nil {
		return m.DurationMin
	}
	return nil
}

func (m *TraceQueryParameters) GetDurationMax() *types.Duration {
	if m != nil {
		return m.DurationMax
	}
	return nil
}

func (m *TraceQueryParameters) GetNumTraces() int32 {
	if m != nil {
		return m.NumTraces
	}
	return 0
}

type FindTracesRequest struct {
	Query                *TraceQueryParameters `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FindTracesRequest) Reset()         { *m = FindTracesRequest{} }
func (m *FindTracesRequest) String() string { return proto.CompactTextString(m) }
func (*FindTracesRequest) ProtoMessage()    {}
func (*FindTracesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{11}
}

func (m *FindTracesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindTracesRequest.Unmarshal(m, b)
}
func (m *FindTracesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindTracesRequest.Marshal(b, m, deterministic)
}
func (m *FindTracesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindTracesRequest.Merge(m, src)
}
func (m *FindTracesRequest) XXX_Size() int {
	return xxx_messageInfo_FindTracesRequest.Size(m)
}
func (m *FindTracesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindTracesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindTracesRequest proto.InternalMessageInfo

func (m *FindTracesRequest) GetQuery() *TraceQueryParameters {
	if m != nil {
		return m.Query
	}
	return nil
}

type SpansResponseChunk struct {
	Spans                []*model.Span `protobuf:"bytes,1,rep,name=spans,proto3" json:"spans,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SpansResponseChunk) Reset()         { *m = SpansResponseChunk{} }
func (m *SpansResponseChunk) String() string { return proto.CompactTextString(m) }
func (*SpansResponseChunk) ProtoMessage()    {}
func (*SpansResponseChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{12}
}

func (m *SpansResponseChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpansResponseChunk.Unmarshal(m, b)
}
func (m *SpansResponseChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpansResponseChunk.Marshal(b, m, deterministic)
}
func (m *SpansResponseChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpansResponseChunk.Merge(m, src)
}
func (m *SpansResponseChunk) XXX_Size() int {
	return xxx_messageInfo_SpansResponseChunk.Size(m)
}
func (m *SpansResponseChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_SpansResponseChunk.DiscardUnknown(m)
}

var xxx_messageInfo_SpansResponseChunk proto.InternalMessageInfo

func (m *SpansResponseChunk) GetSpans() []*model.Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

type FindTraceIDsRequest struct {
	Query                *TraceQueryParameters `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FindTraceIDsRequest) Reset()         { *m = FindTraceIDsRequest{} }
func (m *FindTraceIDsRequest) String() string { return proto.CompactTextString(m) }
func (*FindTraceIDsRequest) ProtoMessage()    {}
func (*FindTraceIDsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{13}
}

func (m *FindTraceIDsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindTraceIDsRequest.Unmarshal(m, b)
}
func (m *FindTraceIDsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindTraceIDsRequest.Marshal(b, m, deterministic)
}
func (m *FindTraceIDsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindTraceIDsRequest.Merge(m, src)
}
func (m *FindTraceIDsRequest) XXX_Size() int {
	return xxx_messageInfo_FindTraceIDsRequest.Size(m)
}
func (m *FindTraceIDsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindTraceIDsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindTraceIDsRequest proto.InternalMessageInfo

func (m *FindTraceIDsRequest) GetQuery() *TraceQueryParameters {
	if m != nil {
		return m.Query
	}
	return nil
}

type FindTraceIDsResponse struct {
	TraceIds             [][]byte `protobuf:"bytes,1,rep,name=trace_ids,json=traceIds,proto3" json:"trace_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindTraceIDsResponse) Reset()         { *m = FindTraceIDsResponse{} }
func (m *FindTraceIDsResponse) String() string { return proto.CompactTextString(m) }
func (*FindTraceIDsResponse) ProtoMessage()    {}
func (*FindTraceIDsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{14}
}

func (m *FindTraceIDsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindTraceIDsResponse.Unmarshal(m, b)
}
func (m *FindTraceIDsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindTraceIDsResponse.Marshal(b, m, deterministic)
}
func (m *FindTraceIDsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindTraceIDsResponse.Merge(m, src)
}
func (m *FindTraceIDsResponse) XXX_Size() int {
	return xxx_messageInfo_FindTraceIDsResponse.Size(m)
}
func (m *FindTraceIDsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindTraceIDsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindTraceIDsResponse proto.InternalMessageInfo

func (m *FindTraceIDsResponse) GetTraceIds() [][]byte {
	if m != nil {
		return m.TraceIds
	}
	return nil
}

// empty; extensible in the future
type CapabilitiesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapabilitiesRequest) Reset()         { *m = CapabilitiesRequest{} }
func (m *CapabilitiesRequest) String() string { return proto.CompactTextString(m) }
func (*CapabilitiesRequest) ProtoMessage()    {}
func (*CapabilitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{15}
}

func (m *CapabilitiesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CapabilitiesRequest.Unmarshal(m, b)
}
func (m *CapabilitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CapabilitiesRequest.Marshal(b, m, deterministic)
}
func (m *CapabilitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapabilitiesRequest.Merge(m, src)
}
func (m *CapabilitiesRequest) XXX_Size() int {
	return xxx_messageInfo_CapabilitiesRequest.Size(m)
}
func (m *CapabilitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CapabilitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CapabilitiesRequest proto.InternalMessageInfo

type CapabilitiesResponse struct {
	ArchiveSpanReader    bool     `protobuf:"varint,1,opt,name=archiveSpanReader,proto3" json:"archiveSpanReader,omitempty"`
	ArchiveSpanWriter    bool     `protobuf:"varint,2,opt,name=archiveSpanWriter,proto3" json:"archiveSpanWriter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapabilitiesResponse) Reset()         { *m = CapabilitiesResponse{} }
func (m *CapabilitiesResponse) String() string { return proto.CompactTextString(m) }
func (*CapabilitiesResponse) ProtoMessage()    {}
func (*CapabilitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{16}
}

func (m *CapabilitiesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CapabilitiesResponse.Unmarshal(m, b)
}
func (m *CapabilitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CapabilitiesResponse.Marshal(b, m, deterministic)
}
func (m *CapabilitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapabilitiesResponse.Merge(m, src)
}
func (m *CapabilitiesResponse) XXX_Size() int {
	return xxx_messageInfo_CapabilitiesResponse.Size(m)
}
func (m *CapabilitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CapabilitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CapabilitiesResponse proto.InternalMessageInfo

func (m *CapabilitiesResponse) GetArchiveSpanReader() bool {
	if m != nil {
		return m.ArchiveSpanReader
	}
	return false
}

func (m *CapabilitiesResponse) GetArchiveSpanWriter() bool {
	if m != nil {
		return m.ArchiveSpanWriter
	}
	return false
}

func init() {
	proto.RegisterType((*GetDependenciesRequest)(nil), "jaeger.storage.v1.GetDependenciesRequest")
	proto.RegisterType((*GetDependenciesResponse)(nil), "jaeger.storage.v1.GetDependenciesResponse")
	proto.RegisterType((*WriteSpanRequest)(nil), "jaeger.storage.v1.WriteSpanRequest")
	proto.RegisterType((*WriteSpanResponse)(nil), "jaeger.storage.v1.WriteSpanResponse")
	proto.RegisterType((*GetTraceRequest)(nil), "jaeger.storage.v1.GetTraceRequest")
	proto.RegisterType((*GetServicesRequest)(nil), "jaeger.storage.v1.GetServicesRequest")
	proto.RegisterType((*GetServicesResponse)(nil), "jaeger.storage.v1.GetServicesResponse")
	proto.RegisterType((*GetOperationsRequest)(nil), "jaeger.storage.v1.GetOperationsRequest")
	proto.RegisterType((*Operation)(nil), "jaeger.storage.v1.Operation")
	proto.RegisterType((*GetOperationsResponse)(nil), "jaeger.storage.v1.GetOperationsResponse")
	proto.RegisterType((*TraceQueryParameters)(nil), "jaeger.storage.v1.TraceQueryParameters")
	proto.RegisterMapType((map[string]string)(nil), "jaeger.storage.v1.TraceQueryParameters.TagsEntry")
	proto.RegisterType((*FindTracesRequest)(nil), "jaeger.storage.v1.FindTracesRequest")
	proto.RegisterType((*SpansResponseChunk)(nil), "jaeger.storage.v1.SpansResponseChunk")
	proto.RegisterType((*FindTraceIDsRequest)(nil), "jaeger.storage.v1.FindTraceIDsRequest")
	proto.RegisterType((*FindTraceIDsResponse)(nil), "jaeger.storage.v1.FindTraceIDsResponse")
	proto.RegisterType((*CapabilitiesRequest)(nil), "jaeger.storage.v1.CapabilitiesRequest")
	proto.RegisterType((*CapabilitiesResponse)(nil), "jaeger.storage.v1.CapabilitiesResponse")
}

func init() { proto.RegisterFile("storage.proto", fileDescriptor_0d2c4ccf1453ffdb) }

var fileDescriptor_0d2c4ccf1453ffdb = []byte{
	// 1051 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x73, 0xdb, 0x44,
	0x14, 0x47, 0x89, 0xd3, 0xd8, 0xcf, 0x4e, 0x49, 0xd6, 0x2e, 0x15, 0xa2, 0xb5, 0x83, 0x20, 0x7f,
	0x60, 0x40, 0x26, 0xe6, 0x00, 0x03, 0x65, 0xa0, 0x4e, 0x52, 0x4f, 0x80, 0x42, 0x51, 0x33, 0x74,
	0x86, 0x42, 0x3d, 0x6b, 0x6b, 0x51, 0xd4, 0x58, 0x2b, 0x55, 0x7f, 0x3c, 0xf6, 0x81, 0x1b, 0x1f,
	0x80, 0x23, 0x27, 0xae, 0x7c, 0x0d, 0x8e, 0x3d, 0x72, 0xe6, 0x10, 0x98, 0x70, 0xe4, 0x4b, 0x30,
	0xda, 0x5d, 0xc9, 0x92, 0xac, 0x49, 0xd2, 0x4c, 0x6e, 0xda, 0xb7, 0xbf, 0xf7, 0x7b, 0x6f, 0xdf,
	0x5f, 0xc1, 0x8a, 0x1f, 0x38, 0x1e, 0x36, 0x89, 0xe6, 0x7a, 0x4e, 0xe0, 0xa0, 0xb5, 0xa7, 0x98,
	0x98, 0xc4, 0xd3, 0x62, 0xe9, 0x78, 0x47, 0x69, 0x98, 0x8e, 0xe9, 0xb0, 0xdb, 0x76, 0xf4, 0xc5,
	0x81, 0x4a, 0xcb, 0x74, 0x1c, 0x73, 0x44, 0xda, 0xec, 0x34, 0x08, 0x7f, 0x6c, 0x07, 0x96, 0x4d,
	0xfc, 0x00, 0xdb, 0xae, 0x00, 0x34, 0xf3, 0x00, 0x23, 0xf4, 0x70, 0x60, 0x39, 0x54, 0xdc, 0x57,
	0x6d, 0xc7, 0x20, 0x23, 0x7e, 0x50, 0x7f, 0x93, 0xe0, 0x95, 0x1e, 0x09, 0xf6, 0x88, 0x4b, 0xa8,
	0x41, 0xe8, 0xd0, 0x22, 0xbe, 0x4e, 0x9e, 0x85, 0xc4, 0x0f, 0xd0, 0x2e, 0x80, 0x1f, 0x60, 0x2f,
	0xe8, 0x47, 0x06, 0x64, 0x69, 0x5d, 0xda, 0xae, 0x76, 0x14, 0x8d, 0x93, 0x6b, 0x31, 0xb9, 0x76,
	0x18, 0x5b, 0xef, 0x96, 0x9f, 0x9f, 0xb4, 0x5e, 0xfa, 0xe5, 0xef, 0x96, 0xa4, 0x57, 0x98, 0x5e,
	0x74, 0x83, 0x3e, 0x85, 0x32, 0xa1, 0x06, 0xa7, 0x58, 0x78, 0x01, 0x8a, 0x65, 0x42, 0x8d, 0x48,
	0xae, 0x0e, 0xe0, 0xe6, 0x9c, 0x7f, 0xbe, 0xeb, 0x50, 0x9f, 0xa0, 0x1e, 0xd4, 0x8c, 0x94, 0x5c,
	0x96, 0xd6, 0x17, 0xb7, 0xab, 0x9d, 0xdb, 0x9a, 0x88, 0x24, 0x76, 0xad, 0xfe, 0xb8, 0xa3, 0x25,
	0xaa, 0xd3, 0x2f, 0x2d, 0x7a, 0xdc, 0x2d, 0x45, 0x26, 0xf4, 0x8c, 0xa2, 0xfa, 0x31, 0xac, 0x3e,
	0xf2, 0xac, 0x80, 0x3c, 0x74, 0x31, 0x8d, 0x5f, 0xbf, 0x05, 0x25, 0xdf, 0xc5, 0x54, 0xbc, 0xbb,
	0x9e, 0x23, 0x65, 0x48, 0x06, 0x50, 0xeb, 0xb0, 0x96, 0x52, 0xe6, 0xae, 0xa9, 0x14, 0x5e, 0xee,
	0x91, 0xe0, 0xd0, 0xc3, 0x43, 0x12, 0x13, 0x3e, 0x86, 0x72, 0x10, 0x9d, 0xfb, 0x96, 0xc1, 0x48,
	0x6b, 0xdd, 0xcf, 0x22, 0x57, 0xfe, 0x3a, 0x69, 0xbd, 0x6b, 0x5a, 0xc1, 0x51, 0x38, 0xd0, 0x86,
	0x8e, 0xdd, 0xe6, 0x66, 0x22, 0xa0, 0x45, 0x4d, 0x71, 0x6a, 0xf3, 0x84, 0x31, 0xb6, 0x83, 0xbd,
	0xd3, 0x93, 0xd6, 0xb2, 0xf8, 0xd4, 0x97, 0x19, 0xe3, 0x81, 0xa1, 0x36, 0x00, 0xf5, 0x48, 0xf0,
	0x90, 0x78, 0x63, 0x6b, 0x98, 0x64, 0x50, 0xdd, 0x81, 0x7a, 0x46, 0x2a, 0xe2, 0xa6, 0x40, 0xd9,
	0x17, 0x32, 0x16, 0xb3, 0x8a, 0x9e, 0x9c, 0xd5, 0xfb, 0xd0, 0xe8, 0x91, 0xe0, 0x6b, 0x97, 0xf0,
	0x92, 0x49, 0x8a, 0x41, 0x86, 0x65, 0x81, 0x61, 0xce, 0x57, 0xf4, 0xf8, 0x88, 0x5e, 0x83, 0x4a,
	0x14, 0x87, 0xfe, 0xb1, 0x45, 0x0d, 0x96, 0xe2, 0x88, 0xce, 0xc5, 0xf4, 0x0b, 0x8b, 0x1a, 0xea,
	0x1d, 0xa8, 0x24, 0x5c, 0x08, 0x41, 0x89, 0x62, 0x3b, 0x26, 0x60, 0xdf, 0x67, 0x6b, 0xff, 0x04,
	0x37, 0x72, 0xce, 0x88, 0x17, 0x6c, 0xc2, 0x75, 0x27, 0x96, 0x7e, 0x85, 0xed, 0xe4, 0x1d, 0x39,
	0x29, 0xba, 0x03, 0x90, 0x48, 0x7c, 0x79, 0x81, 0xd5, 0xc7, 0x2d, 0x6d, 0xae, 0xd3, 0xb4, 0xc4,
	0x84, 0x9e, 0xc2, 0xab, 0xbf, 0x97, 0xa0, 0xc1, 0x22, 0xfd, 0x4d, 0x48, 0xbc, 0xe9, 0x03, 0xec,
	0x61, 0x9b, 0x04, 0xc4, 0xf3, 0xd1, 0xeb, 0x50, 0x13, 0xaf, 0xef, 0xa7, 0x1e, 0x54, 0x15, 0xb2,
	0xc8, 0x34, 0xda, 0x48, 0x79, 0xc8, 0x41, 0xfc, 0x71, 0x2b, 0x19, 0x0f, 0xd1, 0x3e, 0x94, 0x02,
	0x6c, 0xfa, 0xf2, 0x22, 0x73, 0x6d, 0xa7, 0xc0, 0xb5, 0x22, 0x07, 0xb4, 0x43, 0x6c, 0xfa, 0xfb,
	0x34, 0xf0, 0xa6, 0x3a, 0x53, 0x47, 0x9f, 0xc3, 0xf5, 0x59, 0xab, 0xf6, 0x6d, 0x8b, 0xca, 0xa5,
	0x17, 0xe8, 0xb5, 0x5a, 0xd2, 0xae, 0xf7, 0x2d, 0x9a, 0xe7, 0xc2, 0x13, 0x79, 0xe9, 0x72, 0x5c,
	0x78, 0x82, 0xee, 0x41, 0x2d, 0x1e, 0x3e, 0xcc, 0xab, 0x6b, 0x8c, 0xe9, 0xd5, 0x39, 0xa6, 0x3d,
	0x01, 0xe2, 0x44, 0xbf, 0x46, 0x44, 0xd5, 0x58, 0x31, 0xf2, 0x29, 0xc3, 0x83, 0x27, 0xf2, 0xf2,
	0x65, 0x78, 0xf0, 0x04, 0xdd, 0x06, 0xa0, 0xa1, 0xdd, 0x67, 0x5d, 0xe3, 0xcb, 0xe5, 0x75, 0x69,
	0x7b, 0x49, 0xaf, 0xd0, 0xd0, 0x66, 0x41, 0xf6, 0x95, 0x0f, 0xa0, 0x92, 0x44, 0x16, 0xad, 0xc2,
	0xe2, 0x31, 0x99, 0x8a, 0xdc, 0x46, 0x9f, 0xa8, 0x01, 0x4b, 0x63, 0x3c, 0x0a, 0xe3, 0x54, 0xf2,
	0xc3, 0x47, 0x0b, 0x1f, 0x4a, 0xaa, 0x0e, 0x6b, 0xf7, 0x2c, 0x6a, 0x70, 0x9a, 0xb8, 0x65, 0x3e,
	0x81, 0xa5, 0x67, 0x51, 0xde, 0xc4, 0x08, 0xd9, 0xba, 0x60, 0x72, 0x75, 0xae, 0xa5, 0xee, 0x03,
	0x8a, 0x46, 0x4a, 0x52, 0xf4, 0xbb, 0x47, 0x21, 0x3d, 0x46, 0x6d, 0x58, 0x8a, 0xda, 0x23, 0x1e,
	0x76, 0x45, 0x73, 0x49, 0x8c, 0x38, 0x8e, 0x53, 0x0f, 0xa1, 0x9e, 0xb8, 0x76, 0xb0, 0x77, 0x55,
	0xce, 0x8d, 0xa1, 0x91, 0x65, 0x15, 0x8d, 0xf9, 0x04, 0x2a, 0xf1, 0x90, 0xe3, 0x2e, 0xd6, 0xba,
	0x77, 0x2f, 0x3b, 0xe5, 0xca, 0x09, 0x7b, 0x59, 0x8c, 0x39, 0x5f, 0xbd, 0x01, 0xf5, 0x5d, 0xec,
	0xe2, 0x81, 0x35, 0xb2, 0x82, 0xd9, 0xaa, 0x52, 0x3d, 0x68, 0x64, 0xc5, 0xc2, 0x9d, 0x77, 0x60,
	0x0d, 0x7b, 0xc3, 0x23, 0x6b, 0x2c, 0xa6, 0x33, 0x36, 0x88, 0xc7, 0x5e, 0x5c, 0xd6, 0xe7, 0x2f,
	0x72, 0x68, 0x36, 0xd4, 0x3d, 0x96, 0xeb, 0x2c, 0x9a, 0x5f, 0x74, 0x9e, 0xc2, 0xea, 0xec, 0xf4,
	0x60, 0x14, 0x9a, 0x16, 0x45, 0xdf, 0x42, 0x25, 0xd9, 0x05, 0xe8, 0x8d, 0x82, 0x98, 0xe6, 0xd7,
	0x8c, 0xf2, 0xe6, 0xd9, 0x20, 0xfe, 0x8e, 0xce, 0x7f, 0x8b, 0xdc, 0x18, 0x77, 0x54, 0x18, 0x7b,
	0x04, 0xe5, 0x78, 0xc7, 0x20, 0xb5, 0x80, 0x26, 0xb7, 0x80, 0x94, 0x8d, 0x02, 0xcc, 0x7c, 0x85,
	0xbd, 0x27, 0xa1, 0xef, 0xa1, 0x9a, 0x5a, 0x1b, 0x68, 0xa3, 0x98, 0x3b, 0xb7, 0x6c, 0x94, 0xcd,
	0xf3, 0x60, 0x22, 0x27, 0x03, 0x58, 0xc9, 0x0c, 0x75, 0xb4, 0x55, 0xac, 0x38, 0xb7, 0x83, 0x94,
	0xed, 0xf3, 0x81, 0xc2, 0xc6, 0x63, 0x80, 0x59, 0x3f, 0xa2, 0xa2, 0x18, 0xcf, 0xb5, 0xeb, 0xc5,
	0xc3, 0xd3, 0x87, 0x5a, 0xba, 0xf6, 0xd1, 0xe6, 0x59, 0xf4, 0xb3, 0x96, 0x53, 0xb6, 0xce, 0xc5,
	0x89, 0x6c, 0x4f, 0xe0, 0xe6, 0xdd, 0x7c, 0xb9, 0x89, 0x9c, 0xff, 0x20, 0xfe, 0x54, 0x52, 0xf7,
	0x57, 0x59, 0x67, 0xd3, 0x8c, 0xe5, 0x4c, 0xb5, 0x3d, 0x61, 0x7f, 0x34, 0xe2, 0xf6, 0xea, 0x8b,
	0xae, 0xf3, 0xb3, 0x04, 0x72, 0xf6, 0x2f, 0x2f, 0x65, 0xfc, 0x88, 0x19, 0x4f, 0x5f, 0xa3, 0xb7,
	0x8a, 0x8d, 0x17, 0xfc, 0xc8, 0x2a, 0x6f, 0x5f, 0x04, 0x2a, 0x22, 0x10, 0x02, 0xe2, 0x36, 0xd3,
	0xf3, 0x24, 0x4a, 0x79, 0xe6, 0x5c, 0x94, 0xf2, 0x82, 0xb9, 0x54, 0x98, 0xf2, 0xa2, 0x41, 0xd5,
	0xbd, 0xf5, 0xfc, 0xb4, 0x29, 0xfd, 0x79, 0xda, 0x94, 0xfe, 0x39, 0x6d, 0x4a, 0x7f, 0xfc, 0xdb,
	0x94, 0xbe, 0x03, 0xa1, 0xd2, 0x1f, 0xef, 0x0c, 0xae, 0xb1, 0x05, 0xf7, 0xfe, 0xff, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x84, 0x36, 0xed, 0x70, 0x33, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SpanWriterPluginClient is the client API for SpanWriterPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpanWriterPluginClient interface {
	// spanstore/Writer
	WriteSpan(ctx context.Context, in *WriteSpanRequest, opts ...grpc.CallOption) (*WriteSpanResponse, error)
}

type spanWriterPluginClient struct {
	cc *grpc.ClientConn
}

func NewSpanWriterPluginClient(cc *grpc.ClientConn) SpanWriterPluginClient {
	return &spanWriterPluginClient{cc}
}

func (c *spanWriterPluginClient) WriteSpan(ctx context.Context, in *WriteSpanRequest, opts ...grpc.CallOption) (*WriteSpanResponse, error) {
	out := new(WriteSpanResponse)
	err := c.cc.Invoke(ctx, "/jaeger.storage.v1.SpanWriterPlugin/WriteSpan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpanWriterPluginServer is the server API for SpanWriterPlugin service.
type SpanWriterPluginServer interface {
	// spanstore/Writer
	WriteSpan(context.Context, *WriteSpanRequest) (*WriteSpanResponse, error)
}

// UnimplementedSpanWriterPluginServer can be embedded to have forward compatible implementations.
type UnimplementedSpanWriterPluginServer struct {
}

func (*UnimplementedSpanWriterPluginServer) WriteSpan(ctx context.Context, req *WriteSpanRequest) (*WriteSpanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteSpan not implemented")
}

func RegisterSpanWriterPluginServer(s *grpc.Server, srv SpanWriterPluginServer) {
	s.RegisterService(&_SpanWriterPlugin_serviceDesc, srv)
}

func _SpanWriterPlugin_WriteSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteSpanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpanWriterPluginServer).WriteSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.storage.v1.SpanWriterPlugin/WriteSpan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpanWriterPluginServer).WriteSpan(ctx, req.(*WriteSpanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SpanWriterPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jaeger.storage.v1.SpanWriterPlugin",
	HandlerType: (*SpanWriterPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteSpan",
			Handler:    _SpanWriterPlugin_WriteSpan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}

// SpanReaderPluginClient is the client API for SpanReaderPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpanReaderPluginClient interface {
	// spanstore/Reader
	GetTrace(ctx context.Context, in *GetTraceRequest, opts ...grpc.CallOption) (SpanReaderPlugin_GetTraceClient, error)
	GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error)
	GetOperations(ctx context.Context, in *GetOperationsRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error)
	FindTraces(ctx context.Context, in *FindTracesRequest, opts ...grpc.CallOption) (SpanReaderPlugin_FindTracesClient, error)
	FindTraceIDs(ctx context.Context, in *FindTraceIDsRequest, opts ...grpc.CallOption) (*FindTraceIDsResponse, error)
}

type spanReaderPluginClient struct {
	cc *grpc.ClientConn
}

func NewSpanReaderPluginClient(cc *grpc.ClientConn) SpanReaderPluginClient {
	return &spanReaderPluginClient{cc}
}

func (c *spanReaderPluginClient) GetTrace(ctx context.Context, in *GetTraceRequest, opts ...grpc.CallOption) (SpanReaderPlugin_GetTraceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SpanReaderPlugin_serviceDesc.Streams[0], "/jaeger.storage.v1.SpanReaderPlugin/GetTrace", opts...)
	if err != nil {
		return nil, err
	}
	x := &spanReaderPluginGetTraceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpanReaderPlugin_GetTraceClient interface {
	Recv() (*SpansResponseChunk, error)
	grpc.ClientStream
}

type spanReaderPluginGetTraceClient struct {
	grpc.ClientStream
}

func (x *spanReaderPluginGetTraceClient) Recv() (*SpansResponseChunk, error) {
	m := new(SpansResponseChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *spanReaderPluginClient) GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error) {
	out := new(GetServicesResponse)
	err := c.cc.Invoke(ctx, "/jaeger.storage.v1.SpanReaderPlugin/GetServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spanReaderPluginClient) GetOperations(ctx context.Context, in *GetOperationsRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error) {
	out := new(GetOperationsResponse)
	err := c.cc.Invoke(ctx, "/jaeger.storage.v1.SpanReaderPlugin/GetOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spanReaderPluginClient) FindTraces(ctx context.Context, in *FindTracesRequest, opts ...grpc.CallOption) (SpanReaderPlugin_FindTracesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SpanReaderPlugin_serviceDesc.Streams[1], "/jaeger.storage.v1.SpanReaderPlugin/FindTraces", opts...)
	if err != nil {
		return nil, err
	}
	x := &spanReaderPluginFindTracesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpanReaderPlugin_FindTracesClient interface {
	Recv() (*SpansResponseChunk, error)
	grpc.ClientStream
}

type spanReaderPluginFindTracesClient struct {
	grpc.ClientStream
}

func (x *spanReaderPluginFindTracesClient) Recv() (*SpansResponseChunk, error) {
	m := new(SpansResponseChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *spanReaderPluginClient) FindTraceIDs(ctx context.Context, in *FindTraceIDsRequest, opts ...grpc.CallOption) (*FindTraceIDsResponse, error) {
	out := new(FindTraceIDsResponse)
	err := c.cc.Invoke(ctx, "/jaeger.storage.v1.SpanReaderPlugin/FindTraceIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpanReaderPluginServer is the server API for SpanReaderPlugin service.
type SpanReaderPluginServer interface {
	// spanstore/Reader
	GetTrace(*GetTraceRequest, SpanReaderPlugin_GetTraceServer) error
	GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error)
	GetOperations(context.Context, *GetOperationsRequest) (*GetOperationsResponse, error)
	FindTraces(*FindTracesRequest, SpanReaderPlugin_FindTracesServer) error
	FindTraceIDs(context.Context, *FindTraceIDsRequest) (*FindTraceIDsResponse, error)
}

// UnimplementedSpanReaderPluginServer can be embedded to have forward compatible implementations.
type UnimplementedSpanReaderPluginServer struct {
}

func (*UnimplementedSpanReaderPluginServer) GetTrace(req *GetTraceRequest, srv SpanReaderPlugin_GetTraceServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTrace not implemented")
}
func (*UnimplementedSpanReaderPluginServer) GetServices(ctx context.Context, req *GetServicesRequest) (*GetServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (*UnimplementedSpanReaderPluginServer) GetOperations(ctx context.Context, req *GetOperationsRequest) (*GetOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperations not implemented")
}
func (*UnimplementedSpanReaderPluginServer) FindTraces(req *FindTracesRequest, srv SpanReaderPlugin_FindTracesServer) error {
	return status.Errorf(codes.Unimplemented, "method FindTraces not implemented")
}
func (*UnimplementedSpanReaderPluginServer) FindTraceIDs(ctx context.Context, req *FindTraceIDsRequest) (*FindTraceIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTraceIDs not implemented")
}

func RegisterSpanReaderPluginServer(s *grpc.Server, srv SpanReaderPluginServer) {
	s.RegisterService(&_SpanReaderPlugin_serviceDesc, srv)
}

func _SpanReaderPlugin_GetTrace_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTraceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpanReaderPluginServer).GetTrace(m, &spanReaderPluginGetTraceServer{stream})
}

type SpanReaderPlugin_GetTraceServer interface {
	Send(*SpansResponseChunk) error
	grpc.ServerStream
}

type spanReaderPluginGetTraceServer struct {
	grpc.ServerStream
}

func (x *spanReaderPluginGetTraceServer) Send(m *SpansResponseChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _SpanReaderPlugin_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpanReaderPluginServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.storage.v1.SpanReaderPlugin/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpanReaderPluginServer).GetServices(ctx, req.(*GetServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpanReaderPlugin_GetOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpanReaderPluginServer).GetOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.storage.v1.SpanReaderPlugin/GetOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpanReaderPluginServer).GetOperations(ctx, req.(*GetOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpanReaderPlugin_FindTraces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindTracesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpanReaderPluginServer).FindTraces(m, &spanReaderPluginFindTracesServer{stream})
}

type SpanReaderPlugin_FindTracesServer interface {
	Send(*SpansResponseChunk) error
	grpc.ServerStream
}

type spanReaderPluginFindTracesServer struct {
	grpc.ServerStream
}

func (x *spanReaderPluginFindTracesServer) Send(m *SpansResponseChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _SpanReaderPlugin_FindTraceIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTraceIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpanReaderPluginServer).FindTraceIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.storage.v1.SpanReaderPlugin/FindTraceIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpanReaderPluginServer).FindTraceIDs(ctx, req.(*FindTraceIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SpanReaderPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jaeger.storage.v1.SpanReaderPlugin",
	HandlerType: (*SpanReaderPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServices",
			Handler:    _SpanReaderPlugin_GetServices_Handler,
		},
		{
			MethodName: "GetOperations",
			Handler:    _SpanReaderPlugin_GetOperations_Handler,
		},
		{
			MethodName: "FindTraceIDs",
			Handler:    _SpanReaderPlugin_FindTraceIDs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTrace",
			Handler:       _SpanReaderPlugin_GetTrace_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindTraces",
			Handler:       _SpanReaderPlugin_FindTraces_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "storage.proto",
}

// ArchiveSpanWriterPluginClient is the client API for ArchiveSpanWriterPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArchiveSpanWriterPluginClient interface {
	// spanstore/Writer
	WriteArchiveSpan(ctx context.Context, in *WriteSpanRequest, opts ...grpc.CallOption) (*WriteSpanResponse, error)
}

type archiveSpanWriterPluginClient struct {
	cc *grpc.ClientConn
}

func NewArchiveSpanWriterPluginClient(cc *grpc.ClientConn) ArchiveSpanWriterPluginClient {
	return &archiveSpanWriterPluginClient{cc}
}

func (c *archiveSpanWriterPluginClient) WriteArchiveSpan(ctx context.Context, in *WriteSpanRequest, opts ...grpc.CallOption) (*WriteSpanResponse, error) {
	out := new(WriteSpanResponse)
	err := c.cc.Invoke(ctx, "/jaeger.storage.v1.ArchiveSpanWriterPlugin/WriteArchiveSpan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArchiveSpanWriterPluginServer is the server API for ArchiveSpanWriterPlugin service.
type ArchiveSpanWriterPluginServer interface {
	// spanstore/Writer
	WriteArchiveSpan(context.Context, *WriteSpanRequest) (*WriteSpanResponse, error)
}

// UnimplementedArchiveSpanWriterPluginServer can be embedded to have forward compatible implementations.
type UnimplementedArchiveSpanWriterPluginServer struct {
}

func (*UnimplementedArchiveSpanWriterPluginServer) WriteArchiveSpan(ctx context.Context, req *WriteSpanRequest) (*WriteSpanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteArchiveSpan not implemented")
}

func RegisterArchiveSpanWriterPluginServer(s *grpc.Server, srv ArchiveSpanWriterPluginServer) {
	s.RegisterService(&_ArchiveSpanWriterPlugin_serviceDesc, srv)
}

func _ArchiveSpanWriterPlugin_WriteArchiveSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteSpanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveSpanWriterPluginServer).WriteArchiveSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.storage.v1.ArchiveSpanWriterPlugin/WriteArchiveSpan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveSpanWriterPluginServer).WriteArchiveSpan(ctx, req.(*WriteSpanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArchiveSpanWriterPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jaeger.storage.v1.ArchiveSpanWriterPlugin",
	HandlerType: (*ArchiveSpanWriterPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteArchiveSpan",
			Handler:    _ArchiveSpanWriterPlugin_WriteArchiveSpan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}

// ArchiveSpanReaderPluginClient is the client API for ArchiveSpanReaderPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArchiveSpanReaderPluginClient interface {
	// spanstore/Reader
	GetArchiveTrace(ctx context.Context, in *GetTraceRequest, opts ...grpc.CallOption) (ArchiveSpanReaderPlugin_GetArchiveTraceClient, error)
}

type archiveSpanReaderPluginClient struct {
	cc *grpc.ClientConn
}

func NewArchiveSpanReaderPluginClient(cc *grpc.ClientConn) ArchiveSpanReaderPluginClient {
	return &archiveSpanReaderPluginClient{cc}
}

func (c *archiveSpanReaderPluginClient) GetArchiveTrace(ctx context.Context, in *GetTraceRequest, opts ...grpc.CallOption) (ArchiveSpanReaderPlugin_GetArchiveTraceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ArchiveSpanReaderPlugin_serviceDesc.Streams[0], "/jaeger.storage.v1.ArchiveSpanReaderPlugin/GetArchiveTrace", opts...)
	if err != nil {
		return nil, err
	}
	x := &archiveSpanReaderPluginGetArchiveTraceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArchiveSpanReaderPlugin_GetArchiveTraceClient interface {
	Recv() (*SpansResponseChunk, error)
	grpc.ClientStream
}

type archiveSpanReaderPluginGetArchiveTraceClient struct {
	grpc.ClientStream
}

func (x *archiveSpanReaderPluginGetArchiveTraceClient) Recv() (*SpansResponseChunk, error) {
	m := new(SpansResponseChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArchiveSpanReaderPluginServer is the server API for ArchiveSpanReaderPlugin service.
type ArchiveSpanReaderPluginServer interface {
	// spanstore/Reader
	GetArchiveTrace(*GetTraceRequest, ArchiveSpanReaderPlugin_GetArchiveTraceServer) error
}

// UnimplementedArchiveSpanReaderPluginServer can be embedded to have forward compatible implementations.
type UnimplementedArchiveSpanReaderPluginServer struct {
}

func (*UnimplementedArchiveSpanReaderPluginServer) GetArchiveTrace(req *GetTraceRequest, srv ArchiveSpanReaderPlugin_GetArchiveTraceServer) error {
	return status.Errorf(codes.Unimplemented, "method GetArchiveTrace not implemented")
}

func RegisterArchiveSpanReaderPluginServer(s *grpc.Server, srv ArchiveSpanReaderPluginServer) {
	s.RegisterService(&_ArchiveSpanReaderPlugin_serviceDesc, srv)
}

func _ArchiveSpanReaderPlugin_GetArchiveTrace_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTraceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArchiveSpanReaderPluginServer).GetArchiveTrace(m, &archiveSpanReaderPluginGetArchiveTraceServer{stream})
}

type ArchiveSpanReaderPlugin_GetArchiveTraceServer interface {
	Send(*SpansResponseChunk) error
	grpc.ServerStream
}

type archiveSpanReaderPluginGetArchiveTraceServer struct {
	grpc.ServerStream
}

func (x *archiveSpanReaderPluginGetArchiveTraceServer) Send(m *SpansResponseChunk) error {
	return x.ServerStream.SendMsg(m)
}

var _ArchiveSpanReaderPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jaeger.storage.v1.ArchiveSpanReaderPlugin",
	HandlerType: (*ArchiveSpanReaderPluginServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetArchiveTrace",
			Handler:       _ArchiveSpanReaderPlugin_GetArchiveTrace_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "storage.proto",
}

// DependenciesReaderPluginClient is the client API for DependenciesReaderPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DependenciesReaderPluginClient interface {
	// dependencystore/Reader
	GetDependencies(ctx context.Context, in *GetDependenciesRequest, opts ...grpc.CallOption) (*GetDependenciesResponse, error)
}

type dependenciesReaderPluginClient struct {
	cc *grpc.ClientConn
}

func NewDependenciesReaderPluginClient(cc *grpc.ClientConn) DependenciesReaderPluginClient {
	return &dependenciesReaderPluginClient{cc}
}

func (c *dependenciesReaderPluginClient) GetDependencies(ctx context.Context, in *GetDependenciesRequest, opts ...grpc.CallOption) (*GetDependenciesResponse, error) {
	out := new(GetDependenciesResponse)
	err := c.cc.Invoke(ctx, "/jaeger.storage.v1.DependenciesReaderPlugin/GetDependencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DependenciesReaderPluginServer is the server API for DependenciesReaderPlugin service.
type DependenciesReaderPluginServer interface {
	// dependencystore/Reader
	GetDependencies(context.Context, *GetDependenciesRequest) (*GetDependenciesResponse, error)
}

// UnimplementedDependenciesReaderPluginServer can be embedded to have forward compatible implementations.
type UnimplementedDependenciesReaderPluginServer struct {
}

func (*UnimplementedDependenciesReaderPluginServer) GetDependencies(ctx context.Context, req *GetDependenciesRequest) (*GetDependenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDependencies not implemented")
}

func RegisterDependenciesReaderPluginServer(s *grpc.Server, srv DependenciesReaderPluginServer) {
	s.RegisterService(&_DependenciesReaderPlugin_serviceDesc, srv)
}

func _DependenciesReaderPlugin_GetDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDependenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependenciesReaderPluginServer).GetDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.storage.v1.DependenciesReaderPlugin/GetDependencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependenciesReaderPluginServer).GetDependencies(ctx, req.(*GetDependenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DependenciesReaderPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jaeger.storage.v1.DependenciesReaderPlugin",
	HandlerType: (*DependenciesReaderPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDependencies",
			Handler:    _DependenciesReaderPlugin_GetDependencies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}

// PluginCapabilitiesClient is the client API for PluginCapabilities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PluginCapabilitiesClient interface {
	Capabilities(ctx context.Context, in *CapabilitiesRequest, opts ...grpc.CallOption) (*CapabilitiesResponse, error)
}

type pluginCapabilitiesClient struct {
	cc *grpc.ClientConn
}

func NewPluginCapabilitiesClient(cc *grpc.ClientConn) PluginCapabilitiesClient {
	return &pluginCapabilitiesClient{cc}
}

func (c *pluginCapabilitiesClient) Capabilities(ctx context.Context, in *CapabilitiesRequest, opts ...grpc.CallOption) (*CapabilitiesResponse, error) {
	out := new(CapabilitiesResponse)
	err := c.cc.Invoke(ctx, "/jaeger.storage.v1.PluginCapabilities/Capabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginCapabilitiesServer is the server API for PluginCapabilities service.
type PluginCapabilitiesServer interface {
	Capabilities(context.Context, *CapabilitiesRequest) (*CapabilitiesResponse, error)
}

// UnimplementedPluginCapabilitiesServer can be embedded to have forward compatible implementations.
type UnimplementedPluginCapabilitiesServer struct {
}

func (*UnimplementedPluginCapabilitiesServer) Capabilities(ctx context.Context, req *CapabilitiesRequest) (*CapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Capabilities not implemented")
}

func RegisterPluginCapabilitiesServer(s *grpc.Server, srv PluginCapabilitiesServer) {
	s.RegisterService(&_PluginCapabilities_serviceDesc, srv)
}

func _PluginCapabilities_Capabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginCapabilitiesServer).Capabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.storage.v1.PluginCapabilities/Capabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginCapabilitiesServer).Capabilities(ctx, req.(*CapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PluginCapabilities_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jaeger.storage.v1.PluginCapabilities",
	HandlerType: (*PluginCapabilitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Capabilities",
			Handler:    _PluginCapabilities_Capabilities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}
