// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sampling.proto

package api_v2

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SamplingStrategyType int32

const (
	SamplingStrategyType_PROBABILISTIC SamplingStrategyType = 0
	SamplingStrategyType_RATE_LIMITING SamplingStrategyType = 1
)

var SamplingStrategyType_name = map[int32]string{
	0: "PROBABILISTIC",
	1: "RATE_LIMITING",
}

var SamplingStrategyType_value = map[string]int32{
	"PROBABILISTIC": 0,
	"RATE_LIMITING": 1,
}

func (x SamplingStrategyType) String() string {
	return proto.EnumName(SamplingStrategyType_name, int32(x))
}

func (SamplingStrategyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_79c798842d009798, []int{0}
}

type ProbabilisticSamplingStrategy struct {
	SamplingRate         float64  `protobuf:"fixed64,1,opt,name=samplingRate,proto3" json:"samplingRate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProbabilisticSamplingStrategy) Reset()         { *m = ProbabilisticSamplingStrategy{} }
func (m *ProbabilisticSamplingStrategy) String() string { return proto.CompactTextString(m) }
func (*ProbabilisticSamplingStrategy) ProtoMessage()    {}
func (*ProbabilisticSamplingStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_79c798842d009798, []int{0}
}

func (m *ProbabilisticSamplingStrategy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProbabilisticSamplingStrategy.Unmarshal(m, b)
}
func (m *ProbabilisticSamplingStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProbabilisticSamplingStrategy.Marshal(b, m, deterministic)
}
func (m *ProbabilisticSamplingStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbabilisticSamplingStrategy.Merge(m, src)
}
func (m *ProbabilisticSamplingStrategy) XXX_Size() int {
	return xxx_messageInfo_ProbabilisticSamplingStrategy.Size(m)
}
func (m *ProbabilisticSamplingStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbabilisticSamplingStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_ProbabilisticSamplingStrategy proto.InternalMessageInfo

func (m *ProbabilisticSamplingStrategy) GetSamplingRate() float64 {
	if m != nil {
		return m.SamplingRate
	}
	return 0
}

type RateLimitingSamplingStrategy struct {
	MaxTracesPerSecond   int32    `protobuf:"varint,1,opt,name=maxTracesPerSecond,proto3" json:"maxTracesPerSecond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RateLimitingSamplingStrategy) Reset()         { *m = RateLimitingSamplingStrategy{} }
func (m *RateLimitingSamplingStrategy) String() string { return proto.CompactTextString(m) }
func (*RateLimitingSamplingStrategy) ProtoMessage()    {}
func (*RateLimitingSamplingStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_79c798842d009798, []int{1}
}

func (m *RateLimitingSamplingStrategy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RateLimitingSamplingStrategy.Unmarshal(m, b)
}
func (m *RateLimitingSamplingStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RateLimitingSamplingStrategy.Marshal(b, m, deterministic)
}
func (m *RateLimitingSamplingStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitingSamplingStrategy.Merge(m, src)
}
func (m *RateLimitingSamplingStrategy) XXX_Size() int {
	return xxx_messageInfo_RateLimitingSamplingStrategy.Size(m)
}
func (m *RateLimitingSamplingStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitingSamplingStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitingSamplingStrategy proto.InternalMessageInfo

func (m *RateLimitingSamplingStrategy) GetMaxTracesPerSecond() int32 {
	if m != nil {
		return m.MaxTracesPerSecond
	}
	return 0
}

type OperationSamplingStrategy struct {
	Operation             string                         `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	ProbabilisticSampling *ProbabilisticSamplingStrategy `protobuf:"bytes,2,opt,name=probabilisticSampling,proto3" json:"probabilisticSampling,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                       `json:"-"`
	XXX_unrecognized      []byte                         `json:"-"`
	XXX_sizecache         int32                          `json:"-"`
}

func (m *OperationSamplingStrategy) Reset()         { *m = OperationSamplingStrategy{} }
func (m *OperationSamplingStrategy) String() string { return proto.CompactTextString(m) }
func (*OperationSamplingStrategy) ProtoMessage()    {}
func (*OperationSamplingStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_79c798842d009798, []int{2}
}

func (m *OperationSamplingStrategy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperationSamplingStrategy.Unmarshal(m, b)
}
func (m *OperationSamplingStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperationSamplingStrategy.Marshal(b, m, deterministic)
}
func (m *OperationSamplingStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationSamplingStrategy.Merge(m, src)
}
func (m *OperationSamplingStrategy) XXX_Size() int {
	return xxx_messageInfo_OperationSamplingStrategy.Size(m)
}
func (m *OperationSamplingStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationSamplingStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_OperationSamplingStrategy proto.InternalMessageInfo

func (m *OperationSamplingStrategy) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *OperationSamplingStrategy) GetProbabilisticSampling() *ProbabilisticSamplingStrategy {
	if m != nil {
		return m.ProbabilisticSampling
	}
	return nil
}

type PerOperationSamplingStrategies struct {
	DefaultSamplingProbability       float64                      `protobuf:"fixed64,1,opt,name=defaultSamplingProbability,proto3" json:"defaultSamplingProbability,omitempty"`
	DefaultLowerBoundTracesPerSecond float64                      `protobuf:"fixed64,2,opt,name=defaultLowerBoundTracesPerSecond,proto3" json:"defaultLowerBoundTracesPerSecond,omitempty"`
	PerOperationStrategies           []*OperationSamplingStrategy `protobuf:"bytes,3,rep,name=perOperationStrategies,proto3" json:"perOperationStrategies,omitempty"`
	DefaultUpperBoundTracesPerSecond float64                      `protobuf:"fixed64,4,opt,name=defaultUpperBoundTracesPerSecond,proto3" json:"defaultUpperBoundTracesPerSecond,omitempty"`
	XXX_NoUnkeyedLiteral             struct{}                     `json:"-"`
	XXX_unrecognized                 []byte                       `json:"-"`
	XXX_sizecache                    int32                        `json:"-"`
}

func (m *PerOperationSamplingStrategies) Reset()         { *m = PerOperationSamplingStrategies{} }
func (m *PerOperationSamplingStrategies) String() string { return proto.CompactTextString(m) }
func (*PerOperationSamplingStrategies) ProtoMessage()    {}
func (*PerOperationSamplingStrategies) Descriptor() ([]byte, []int) {
	return fileDescriptor_79c798842d009798, []int{3}
}

func (m *PerOperationSamplingStrategies) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PerOperationSamplingStrategies.Unmarshal(m, b)
}
func (m *PerOperationSamplingStrategies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PerOperationSamplingStrategies.Marshal(b, m, deterministic)
}
func (m *PerOperationSamplingStrategies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerOperationSamplingStrategies.Merge(m, src)
}
func (m *PerOperationSamplingStrategies) XXX_Size() int {
	return xxx_messageInfo_PerOperationSamplingStrategies.Size(m)
}
func (m *PerOperationSamplingStrategies) XXX_DiscardUnknown() {
	xxx_messageInfo_PerOperationSamplingStrategies.DiscardUnknown(m)
}

var xxx_messageInfo_PerOperationSamplingStrategies proto.InternalMessageInfo

func (m *PerOperationSamplingStrategies) GetDefaultSamplingProbability() float64 {
	if m != nil {
		return m.DefaultSamplingProbability
	}
	return 0
}

func (m *PerOperationSamplingStrategies) GetDefaultLowerBoundTracesPerSecond() float64 {
	if m != nil {
		return m.DefaultLowerBoundTracesPerSecond
	}
	return 0
}

func (m *PerOperationSamplingStrategies) GetPerOperationStrategies() []*OperationSamplingStrategy {
	if m != nil {
		return m.PerOperationStrategies
	}
	return nil
}

func (m *PerOperationSamplingStrategies) GetDefaultUpperBoundTracesPerSecond() float64 {
	if m != nil {
		return m.DefaultUpperBoundTracesPerSecond
	}
	return 0
}

type SamplingStrategyResponse struct {
	StrategyType          SamplingStrategyType            `protobuf:"varint,1,opt,name=strategyType,proto3,enum=jaeger.api_v2.SamplingStrategyType" json:"strategyType,omitempty"`
	ProbabilisticSampling *ProbabilisticSamplingStrategy  `protobuf:"bytes,2,opt,name=probabilisticSampling,proto3" json:"probabilisticSampling,omitempty"`
	RateLimitingSampling  *RateLimitingSamplingStrategy   `protobuf:"bytes,3,opt,name=rateLimitingSampling,proto3" json:"rateLimitingSampling,omitempty"`
	OperationSampling     *PerOperationSamplingStrategies `protobuf:"bytes,4,opt,name=operationSampling,proto3" json:"operationSampling,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                        `json:"-"`
	XXX_unrecognized      []byte                          `json:"-"`
	XXX_sizecache         int32                           `json:"-"`
}

func (m *SamplingStrategyResponse) Reset()         { *m = SamplingStrategyResponse{} }
func (m *SamplingStrategyResponse) String() string { return proto.CompactTextString(m) }
func (*SamplingStrategyResponse) ProtoMessage()    {}
func (*SamplingStrategyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_79c798842d009798, []int{4}
}

func (m *SamplingStrategyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SamplingStrategyResponse.Unmarshal(m, b)
}
func (m *SamplingStrategyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SamplingStrategyResponse.Marshal(b, m, deterministic)
}
func (m *SamplingStrategyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SamplingStrategyResponse.Merge(m, src)
}
func (m *SamplingStrategyResponse) XXX_Size() int {
	return xxx_messageInfo_SamplingStrategyResponse.Size(m)
}
func (m *SamplingStrategyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SamplingStrategyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SamplingStrategyResponse proto.InternalMessageInfo

func (m *SamplingStrategyResponse) GetStrategyType() SamplingStrategyType {
	if m != nil {
		return m.StrategyType
	}
	return SamplingStrategyType_PROBABILISTIC
}

func (m *SamplingStrategyResponse) GetProbabilisticSampling() *ProbabilisticSamplingStrategy {
	if m != nil {
		return m.ProbabilisticSampling
	}
	return nil
}

func (m *SamplingStrategyResponse) GetRateLimitingSampling() *RateLimitingSamplingStrategy {
	if m != nil {
		return m.RateLimitingSampling
	}
	return nil
}

func (m *SamplingStrategyResponse) GetOperationSampling() *PerOperationSamplingStrategies {
	if m != nil {
		return m.OperationSampling
	}
	return nil
}

type SamplingStrategyParameters struct {
	ServiceName          string   `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SamplingStrategyParameters) Reset()         { *m = SamplingStrategyParameters{} }
func (m *SamplingStrategyParameters) String() string { return proto.CompactTextString(m) }
func (*SamplingStrategyParameters) ProtoMessage()    {}
func (*SamplingStrategyParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_79c798842d009798, []int{5}
}

func (m *SamplingStrategyParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SamplingStrategyParameters.Unmarshal(m, b)
}
func (m *SamplingStrategyParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SamplingStrategyParameters.Marshal(b, m, deterministic)
}
func (m *SamplingStrategyParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SamplingStrategyParameters.Merge(m, src)
}
func (m *SamplingStrategyParameters) XXX_Size() int {
	return xxx_messageInfo_SamplingStrategyParameters.Size(m)
}
func (m *SamplingStrategyParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_SamplingStrategyParameters.DiscardUnknown(m)
}

var xxx_messageInfo_SamplingStrategyParameters proto.InternalMessageInfo

func (m *SamplingStrategyParameters) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func init() {
	proto.RegisterEnum("jaeger.api_v2.SamplingStrategyType", SamplingStrategyType_name, SamplingStrategyType_value)
	proto.RegisterType((*ProbabilisticSamplingStrategy)(nil), "jaeger.api_v2.ProbabilisticSamplingStrategy")
	proto.RegisterType((*RateLimitingSamplingStrategy)(nil), "jaeger.api_v2.RateLimitingSamplingStrategy")
	proto.RegisterType((*OperationSamplingStrategy)(nil), "jaeger.api_v2.OperationSamplingStrategy")
	proto.RegisterType((*PerOperationSamplingStrategies)(nil), "jaeger.api_v2.PerOperationSamplingStrategies")
	proto.RegisterType((*SamplingStrategyResponse)(nil), "jaeger.api_v2.SamplingStrategyResponse")
	proto.RegisterType((*SamplingStrategyParameters)(nil), "jaeger.api_v2.SamplingStrategyParameters")
}

func init() { proto.RegisterFile("sampling.proto", fileDescriptor_79c798842d009798) }

var fileDescriptor_79c798842d009798 = []byte{
	// 637 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0x76, 0x5a, 0x21, 0xe1, 0x15, 0x10, 0x46, 0xd4, 0xda, 0x40, 0xd3, 0x2c, 0x07, 0x2a, 0xc2,
	0xae, 0xae, 0xf1, 0x42, 0x0c, 0x49, 0x4b, 0x0c, 0x59, 0x52, 0xa0, 0xd9, 0xd6, 0x8b, 0x1e, 0x70,
	0xba, 0x8c, 0xc3, 0x98, 0x76, 0x67, 0x32, 0x33, 0x14, 0xb9, 0x9a, 0x78, 0xf5, 0xa0, 0x67, 0x2f,
	0xfe, 0x25, 0x1e, 0x3d, 0x9a, 0x78, 0xf3, 0x64, 0xd0, 0x3f, 0xc4, 0x74, 0xbb, 0x05, 0xba, 0xfd,
	0x75, 0xf3, 0x34, 0xbb, 0xef, 0x7d, 0xef, 0x7b, 0xdf, 0x7b, 0xf3, 0xe6, 0xc1, 0xbc, 0x26, 0x2d,
	0xd9, 0xe4, 0x21, 0xb3, 0xa5, 0x12, 0x46, 0xe0, 0xb9, 0xb7, 0x84, 0x32, 0xaa, 0x6c, 0x22, 0xf9,
	0x51, 0xdb, 0xcd, 0x2d, 0x31, 0xc1, 0x44, 0xe4, 0x71, 0x3a, 0x5f, 0x5d, 0x50, 0x6e, 0x99, 0x09,
	0xc1, 0x9a, 0xd4, 0x21, 0x92, 0x3b, 0x24, 0x0c, 0x85, 0x21, 0x86, 0x8b, 0x50, 0xc7, 0xde, 0x8d,
	0xe8, 0x08, 0x36, 0x19, 0x0d, 0x37, 0xf5, 0x19, 0x61, 0x8c, 0x2a, 0x47, 0xc8, 0x08, 0x31, 0x88,
	0xb6, 0x76, 0x60, 0xa5, 0xaa, 0x44, 0x83, 0x34, 0x78, 0x93, 0x6b, 0xc3, 0x83, 0x5a, 0xac, 0xa7,
	0x66, 0x14, 0x31, 0x94, 0x9d, 0x63, 0x0b, 0x66, 0x7b, 0x1a, 0x7d, 0x62, 0x68, 0x16, 0x15, 0x50,
	0x11, 0xf9, 0x7d, 0x36, 0xeb, 0x00, 0x96, 0x3b, 0x67, 0x85, 0xb7, 0xb8, 0xe9, 0xc4, 0x26, 0x39,
	0x6c, 0xc0, 0x2d, 0xf2, 0xae, 0xae, 0x48, 0x40, 0x75, 0x95, 0xaa, 0x1a, 0x0d, 0x44, 0x78, 0x1c,
	0x31, 0x4d, 0xf9, 0x43, 0x3c, 0xd6, 0x17, 0x04, 0xf7, 0x0f, 0x25, 0x55, 0x91, 0xd2, 0x01, 0xb6,
	0x65, 0x98, 0x11, 0x3d, 0x67, 0x44, 0x32, 0xe3, 0x5f, 0x19, 0x70, 0x03, 0xee, 0xc8, 0x61, 0x05,
	0x65, 0x53, 0x05, 0x54, 0xcc, 0xb8, 0x1b, 0x76, 0x5f, 0x87, 0xed, 0xb1, 0xc5, 0xfb, 0xc3, 0xa9,
	0xac, 0x5f, 0x29, 0xc8, 0x57, 0xa9, 0x1a, 0x25, 0x91, 0x53, 0x8d, 0xb7, 0x21, 0x77, 0x4c, 0xdf,
	0x90, 0xd3, 0xa6, 0xe9, 0x39, 0x2f, 0x33, 0x99, 0xf3, 0xb8, 0x89, 0x63, 0x10, 0x78, 0x0f, 0x0a,
	0xb1, 0xb7, 0x22, 0xce, 0xa8, 0x2a, 0x8b, 0xd3, 0xf0, 0x38, 0xd9, 0xc0, 0x54, 0xc4, 0x32, 0x11,
	0x87, 0x5f, 0xc3, 0x5d, 0x79, 0x5d, 0xed, 0xa5, 0xca, 0x6c, 0xba, 0x90, 0x2e, 0x66, 0xdc, 0x62,
	0xa2, 0x27, 0x23, 0x5b, 0xef, 0x8f, 0xe0, 0xb9, 0xa6, 0xf6, 0x85, 0x94, 0x23, 0xd4, 0xde, 0xec,
	0x53, 0x3b, 0x12, 0x67, 0x7d, 0x48, 0x43, 0x76, 0x20, 0x31, 0xd5, 0x52, 0x84, 0x9a, 0xe2, 0x5d,
	0x98, 0xd5, 0xb1, 0xad, 0x7e, 0x2e, 0xbb, 0xd3, 0x38, 0xef, 0xae, 0x26, 0x0a, 0x48, 0x86, 0x77,
	0xa0, 0x7e, 0x5f, 0xe0, 0xff, 0x18, 0x13, 0x7c, 0x04, 0x4b, 0x6a, 0xc8, 0xb3, 0xc8, 0xa6, 0xa3,
	0x14, 0x0f, 0x13, 0x29, 0xc6, 0xbd, 0x20, 0x7f, 0x28, 0x11, 0x7e, 0x05, 0x8b, 0x22, 0x79, 0x57,
	0x51, 0x9f, 0x33, 0xee, 0x66, 0xb2, 0x80, 0xb1, 0xe3, 0xea, 0x0f, 0xf2, 0x58, 0xdb, 0x90, 0x4b,
	0xca, 0xa8, 0x12, 0x45, 0x5a, 0xd4, 0x50, 0xa5, 0x71, 0x01, 0x32, 0x9a, 0xaa, 0x36, 0x0f, 0xe8,
	0x01, 0x69, 0xd1, 0xf8, 0x19, 0x5e, 0x37, 0xad, 0x3f, 0x83, 0xa5, 0x61, 0xf7, 0x80, 0x17, 0x61,
	0xae, 0xea, 0x1f, 0x96, 0x4b, 0x65, 0xaf, 0xe2, 0xd5, 0xea, 0xde, 0xce, 0xc2, 0x8d, 0x8e, 0xc9,
	0x2f, 0xd5, 0x9f, 0x1f, 0x55, 0xbc, 0x7d, 0xaf, 0xee, 0x1d, 0xec, 0x2e, 0x20, 0xf7, 0x2b, 0x82,
	0x5b, 0xbd, 0xf0, 0x7d, 0x12, 0x12, 0x46, 0x15, 0xfe, 0x88, 0xe0, 0xf6, 0x2e, 0x35, 0x03, 0x0b,
	0xe1, 0xc1, 0x84, 0xeb, 0xbf, 0x92, 0x9d, 0x5b, 0x9b, 0x00, 0xed, 0x0d, 0x9a, 0xb5, 0xfa, 0xfe,
	0xe7, 0xdf, 0xcf, 0xa9, 0x15, 0x2b, 0x1b, 0x6d, 0xd9, 0xb6, 0xeb, 0xe8, 0x04, 0x72, 0x0b, 0xad,
	0x97, 0xdb, 0x9f, 0x4a, 0x65, 0x3c, 0xe5, 0xa6, 0x1f, 0xdb, 0x8f, 0xd6, 0x53, 0x28, 0xa5, 0x9e,
	0x02, 0xec, 0x45, 0xf4, 0x85, 0x52, 0xd5, 0xc3, 0x6b, 0x27, 0xc6, 0x48, 0xbd, 0xe5, 0x38, 0x8c,
	0x9b, 0x93, 0xd3, 0x86, 0x1d, 0x88, 0x96, 0xd3, 0xcd, 0x6e, 0x14, 0x09, 0x78, 0xc8, 0xe2, 0xbf,
	0xef, 0x17, 0x79, 0xf4, 0xe3, 0x22, 0x8f, 0x7e, 0x5f, 0xe4, 0xd1, 0xb7, 0x3f, 0x79, 0x04, 0xf7,
	0xb8, 0xb0, 0xfb, 0x80, 0xb1, 0xda, 0x97, 0xd3, 0xdd, 0xb3, 0x31, 0x1d, 0xed, 0xee, 0x27, 0xff,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x78, 0x78, 0xcc, 0x43, 0x3e, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SamplingManagerClient is the client API for SamplingManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SamplingManagerClient interface {
	GetSamplingStrategy(ctx context.Context, in *SamplingStrategyParameters, opts ...grpc.CallOption) (*SamplingStrategyResponse, error)
}

type samplingManagerClient struct {
	cc *grpc.ClientConn
}

func NewSamplingManagerClient(cc *grpc.ClientConn) SamplingManagerClient {
	return &samplingManagerClient{cc}
}

func (c *samplingManagerClient) GetSamplingStrategy(ctx context.Context, in *SamplingStrategyParameters, opts ...grpc.CallOption) (*SamplingStrategyResponse, error) {
	out := new(SamplingStrategyResponse)
	err := c.cc.Invoke(ctx, "/jaeger.api_v2.SamplingManager/GetSamplingStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SamplingManagerServer is the server API for SamplingManager service.
type SamplingManagerServer interface {
	GetSamplingStrategy(context.Context, *SamplingStrategyParameters) (*SamplingStrategyResponse, error)
}

// UnimplementedSamplingManagerServer can be embedded to have forward compatible implementations.
type UnimplementedSamplingManagerServer struct {
}

func (*UnimplementedSamplingManagerServer) GetSamplingStrategy(ctx context.Context, req *SamplingStrategyParameters) (*SamplingStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSamplingStrategy not implemented")
}

func RegisterSamplingManagerServer(s *grpc.Server, srv SamplingManagerServer) {
	s.RegisterService(&_SamplingManager_serviceDesc, srv)
}

func _SamplingManager_GetSamplingStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SamplingStrategyParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplingManagerServer).GetSamplingStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.api_v2.SamplingManager/GetSamplingStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplingManagerServer).GetSamplingStrategy(ctx, req.(*SamplingStrategyParameters))
	}
	return interceptor(ctx, in, info, handler)
}

var _SamplingManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jaeger.api_v2.SamplingManager",
	HandlerType: (*SamplingManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSamplingStrategy",
			Handler:    _SamplingManager_GetSamplingStrategy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sampling.proto",
}
